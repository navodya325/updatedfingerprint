   #include <WiFi.h>
#include <HTTPClient.h>
#include <SimpleTimer.h>           //https://github.com/jfturcot/SimpleTimer
//OLED-----------------------------
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>          //https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h>      //https://github.com/adafruit/Adafruit_SSD1306
#include <Adafruit_Fingerprint.h>  //https://github.com/adafruit/Adafruit-Fingerprint-Sensor-Library

#include <WebServer.h>
#include <EEPROM.h>
#include <ESPmDNS.h>

//buzzer
#include "pitches.h"
//************************************************************************
//Fingerprint scanner Pins (Serial2 pins Rx2 & Tx2)
#define Finger_Rx 16    //Rx2
#define Finger_Tx 17    //Tx2
#define touchPin 5    //Tx2

// Declaration for SSD1306 display connected using software I2C pins are(22 SCL, 21 SDA)

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//************************************************************************
#define BUZZER_PIN 18
//************************************************************************
SimpleTimer timer;
HardwareSerial mySerial(2); //ESP32 Hardware Serial 2
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

//********************************************************************
String user_id;
String macAddress;

bool firstConnect = false;

int i = 0;
int statusCode;
const char* ssid = "Default_SSID";
const char* password = "Default_passord";
String st;
String content;
String esid;
String epass = "";

String getData, Link;
String URL = "http://c3attendance.c3dss.com"; //computer IP or the server domain

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 19800;    // 5hr 30 min 
const int   daylightOffset_sec = 0;

char timeStr[20];
char timeOnlyStr[10];
//************************************************************************
int FingerID = 0, t1, t2,t3,t4;                                  // The Fingerprint ID from the scanner 
bool device_Mode = false;                           // Default Mode Enrollment

unsigned int id;
unsigned long previousMillis = 0;

bool isEnrollmentActive = false;

String interval;
long intervalDuration;
int numfinger=0;
String numfingerst;
//*************************Buzzer melody*********************************
int notDetectedMelody[] = {
 NOTE_C6, NOTE_G5      
};

int notDetectedNoteDurations[] = {
  8
};

int detectedMelody[] = {
  NOTE_C6, NOTE_C6, NOTE_C6, 
};

int detectedNoteDurations[] = {
  8, 4 
};

bool Wificonnect(void);
void Weblaunch(void);
void setupAP(void);
//void checkMode();

//Establishing Local server at port 80
WebServer server(80);

//*************************Biometric Icons*********************************
#define Wifi_start_width 48
#define Wifi_start_height 35
const uint8_t PROGMEM Wifi_start_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 
    0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
    0x00, 0x38, 0x00, 0x1c, 0x00, 0x00, 
    0x00, 0xe0, 0x00, 0x07, 0x00, 0x00, 
    0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 
    0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x08, 0x01, 0xff, 0x80, 0x00, 0x00, 
    0x00, 0x07, 0x81, 0xe4, 0x60, 0x00, 
    0x00, 0x1c, 0x00, 0x06, 0x60, 0x00, 
    0x00, 0x30, 0x00, 0x07, 0xf6, 0x00, 
    0x00, 0x60, 0x00, 0x26, 0x1e, 0x00, 
    0x00, 0xc0, 0x00, 0x38, 0x04, 0x00, 
    0x00, 0x00, 0x38, 0x10, 0x03, 0xc0, 
    0x00, 0x00, 0xfc, 0x31, 0xe3, 0x80, 
    0x00, 0x03, 0x80, 0xe3, 0xf3, 0x00, 
    0x00, 0x06, 0x00, 0xe3, 0xf1, 0x00, 
    0x00, 0x0c, 0x00, 0x23, 0xf1, 0x80, 
    0x00, 0x00, 0x00, 0x23, 0xf1, 0xc0, 
    0x00, 0x00, 0x00, 0x71, 0xe3, 0x00, 
    0x00, 0x00, 0x18, 0xf0, 0x02, 0x00, 
    0x00, 0x00, 0x3c, 0x08, 0x07, 0x00, 
    0x00, 0x00, 0x7e, 0x1e, 0x3b, 0x00, 
    0x00, 0x00, 0x7e, 0x1b, 0xf0, 0x00, 
    0x00, 0x00, 0x3c, 0x01, 0x98, 0x00, 
    0x00, 0x00, 0x18, 0x01, 0x08, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
#define Wifi_connected_width 52
#define Wifi_connected_height 40
const uint8_t PROGMEM Wifi_connected_bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x7e, 0x7f, 0x80, 0x00, 0x00, 
    0x00, 0x01, 0xc0, 0x00, 0xe0, 0x00, 0x00, 
    0x00, 0x07, 0x00, 0x00, 0x38, 0x00, 0x00, 
    0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 
    0x00, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 
    0x00, 0x60, 0x00, 0x00, 0x01, 0x80, 0x00, 
    0x00, 0x40, 0x0f, 0xfc, 0x00, 0x80, 0x00, 
    0x00, 0x00, 0x3c, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xe0, 0x01, 0xc0, 0x00, 0x00, 
    0x00, 0x01, 0x80, 0x00, 0x60, 0x00, 0x00, 
    0x00, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x0e, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x60, 0x01, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
#define FinPr_start_width 64
#define FinPr_start_height 64
const uint8_t PROGMEM FinPr_start_bits[] = {
    0x00,0x00,0x00,0x1f,0xe0,0x00,0x00,0x00
  ,0x00,0x00,0x01,0xff,0xfe,0x00,0x00,0x00
  ,0x00,0x00,0x03,0xff,0xff,0x80,0x00,0x00
  ,0x00,0x00,0x0f,0xc0,0x0f,0xe0,0x00,0x00
  ,0x00,0x00,0x1f,0x00,0x01,0xf8,0x00,0x00
  ,0x00,0x00,0x3c,0x00,0x00,0x7c,0x00,0x00
  ,0x00,0x00,0x78,0x00,0x00,0x3e,0x00,0x00
  ,0x00,0x00,0xf0,0x3f,0xf8,0x0f,0x00,0x00
  ,0x00,0x01,0xe0,0xff,0xfe,0x07,0x80,0x00
  ,0x00,0x03,0xc3,0xff,0xff,0x03,0x80,0x00
  ,0x00,0x03,0x87,0xc0,0x07,0xc3,0xc0,0x00
  ,0x00,0x07,0x0f,0x00,0x03,0xe1,0xc0,0x00
  ,0x00,0x0f,0x0e,0x00,0x00,0xe0,0xe0,0x00
  ,0x00,0x0e,0x1c,0x00,0x00,0xf0,0xe0,0x00
  ,0x00,0x0c,0x3c,0x1f,0xe0,0x70,0xe0,0x00
  ,0x00,0x00,0x38,0x3f,0xf0,0x38,0x70,0x00
  ,0x00,0x00,0x78,0x78,0xf8,0x38,0x70,0x00
  ,0x00,0x00,0x70,0x70,0x3c,0x18,0x70,0x00
  ,0x00,0x00,0xe0,0xe0,0x1e,0x1c,0x70,0x00
  ,0x00,0x03,0xe1,0xe0,0x0e,0x1c,0x70,0x00
  ,0x00,0x0f,0xc1,0xc3,0x0e,0x1c,0x70,0x00
  ,0x00,0x3f,0x03,0xc3,0x8e,0x1c,0x70,0x00
  ,0x00,0x3e,0x03,0x87,0x0e,0x1c,0x70,0x00
  ,0x00,0x30,0x07,0x07,0x0e,0x18,0xe0,0x00
  ,0x00,0x00,0x0e,0x0e,0x0e,0x38,0xe0,0x00
  ,0x00,0x00,0x3e,0x1e,0x1e,0x38,0xe0,0x00
  ,0x00,0x00,0xf8,0x1c,0x1c,0x38,0xe0,0x00
  ,0x00,0x03,0xf0,0x38,0x3c,0x38,0xe0,0x00
  ,0x00,0x3f,0xc0,0xf8,0x78,0x38,0xe0,0x00
  ,0x00,0x7f,0x01,0xf0,0x70,0x38,0xf0,0x00
  ,0x00,0x78,0x03,0xe0,0xe0,0x38,0x70,0x00
  ,0x00,0x00,0x0f,0x81,0xe0,0x38,0x7c,0x00
  ,0x00,0x00,0x3f,0x03,0xc0,0x38,0x3e,0x00
  ,0x00,0x00,0xfc,0x0f,0x80,0x38,0x1e,0x00
  ,0x00,0x07,0xf0,0x1f,0x1c,0x1c,0x04,0x00
  ,0x00,0x3f,0xc0,0x3e,0x3f,0x1e,0x00,0x00
  ,0x00,0x7f,0x00,0xf8,0x7f,0x0f,0x00,0x00
  ,0x00,0x38,0x01,0xf0,0xf7,0x07,0xc0,0x00
  ,0x00,0x00,0x07,0xe1,0xe3,0x83,0xf8,0x00
  ,0x00,0x00,0x3f,0x87,0xc3,0xc0,0xfc,0x00
  ,0x00,0x01,0xfe,0x0f,0x81,0xe0,0x3c,0x00
  ,0x00,0x0f,0xf8,0x1f,0x00,0xf0,0x00,0x00
  ,0x00,0x1f,0xc0,0x7c,0x00,0x7c,0x00,0x00
  ,0x00,0x1e,0x01,0xf8,0x00,0x3f,0x00,0x00
  ,0x00,0x00,0x07,0xe0,0x78,0x0f,0xc0,0x00
  ,0x00,0x00,0x3f,0x81,0xfe,0x07,0xf0,0x00
  ,0x00,0x01,0xfe,0x07,0xff,0x01,0xf0,0x00
  ,0x00,0x07,0xf8,0x0f,0x87,0x80,0x30,0x00
  ,0x00,0x07,0xc0,0x3f,0x03,0xe0,0x00,0x00
  ,0x00,0x06,0x00,0xfc,0x01,0xf8,0x00,0x00
  ,0x00,0x00,0x03,0xf0,0x00,0x7e,0x00,0x00
  ,0x00,0x00,0x0f,0xc0,0x00,0x3f,0x80,0x00
  ,0x00,0x00,0x7f,0x00,0xf8,0x0f,0x80,0x00
  ,0x00,0x00,0xfc,0x03,0xfe,0x01,0x80,0x00
  ,0x00,0x00,0xf0,0x1f,0xff,0x80,0x00,0x00
  ,0x00,0x00,0x00,0x7f,0x07,0xe0,0x00,0x00
  ,0x00,0x00,0x00,0xfc,0x03,0xf8,0x00,0x00
  ,0x00,0x00,0x03,0xf0,0x00,0x78,0x00,0x00
  ,0x00,0x00,0x0f,0xc0,0x00,0x18,0x00,0x00
  ,0x00,0x00,0x0f,0x01,0xf8,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x07,0xfe,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1f,0xfe,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1e,0x0e,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00
  };
//---------------------------------------------------------------
#define FinPr_valid_width 64
#define FinPr_valid_height 64
const uint8_t PROGMEM FinPr_valid_bits[] = {
  0x00,0x00,0x03,0xfe,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00
  ,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00
  ,0x00,0x00,0xfc,0x00,0xfe,0x00,0x00,0x00
  ,0x00,0x03,0xe0,0x00,0x1f,0x00,0x00,0x00
  ,0x00,0x07,0xc0,0x00,0x07,0x80,0x00,0x00
  ,0x00,0x0f,0x80,0x00,0x03,0xe0,0x00,0x00
  ,0x00,0x0e,0x03,0xff,0x01,0xe0,0x00,0x00
  ,0x00,0x1c,0x1f,0xff,0xe0,0xf0,0x00,0x00
  ,0x00,0x3c,0x3f,0xff,0xf0,0x78,0x00,0x00
  ,0x00,0x78,0x7c,0x00,0xf8,0x3c,0x00,0x00
  ,0x00,0x70,0xf0,0x00,0x3c,0x1c,0x00,0x00
  ,0x00,0xe1,0xe0,0x00,0x1e,0x1c,0x00,0x00
  ,0x00,0xe1,0xc0,0x00,0x0f,0x0e,0x00,0x00
  ,0x00,0xc3,0x81,0xfc,0x07,0x0e,0x00,0x00
  ,0x00,0x03,0x83,0xff,0x07,0x8e,0x00,0x00
  ,0x00,0x07,0x07,0x8f,0x83,0x87,0x00,0x00
  ,0x00,0x0f,0x0f,0x03,0xc3,0x87,0x00,0x00
  ,0x00,0x1e,0x0e,0x01,0xc3,0x87,0x00,0x00
  ,0x00,0x3c,0x1c,0x00,0xe1,0x87,0x00,0x00
  ,0x00,0xf8,0x1c,0x30,0xe1,0x87,0x00,0x00
  ,0x07,0xf0,0x38,0x70,0xe1,0x86,0x00,0x00
  ,0x07,0xc0,0x78,0x70,0xe3,0x8e,0x00,0x00
  ,0x02,0x00,0xf0,0xf0,0xe3,0x8e,0x00,0x00
  ,0x00,0x01,0xe0,0xe0,0xe3,0x8e,0x00,0x00
  ,0x00,0x03,0xc1,0xe1,0xc3,0x8e,0x00,0x00
  ,0x00,0x0f,0x83,0xc3,0xc3,0x8e,0x00,0x00
  ,0x00,0x7f,0x07,0x83,0x83,0x0e,0x00,0x00
  ,0x07,0xfc,0x0f,0x07,0x83,0x0e,0x00,0x00
  ,0x07,0xf0,0x1e,0x0f,0x03,0x0e,0x00,0x00
  ,0x07,0x80,0x7c,0x1e,0x03,0x07,0x00,0x00
  ,0x00,0x00,0xf8,0x3c,0x03,0x87,0x80,0x00
  ,0x00,0x03,0xf0,0x78,0x03,0x83,0xc0,0x00
  ,0x00,0x1f,0xc0,0xf0,0x02,0x00,0x00,0x00
  ,0x00,0xff,0x01,0xe1,0xc0,0x0c,0x00,0x00
  ,0x07,0xfc,0x03,0xc3,0xe1,0xff,0xc0,0x00
  ,0x07,0xe0,0x0f,0x87,0xc7,0xff,0xf0,0x00
  ,0x07,0x00,0x3f,0x0f,0x0f,0xff,0xfc,0x00
  ,0x00,0x00,0x7c,0x3e,0x3f,0xff,0xfe,0x00
  ,0x00,0x03,0xf8,0x7c,0x3f,0xff,0xff,0x00
  ,0x00,0x1f,0xe0,0xf0,0x7f,0xff,0xff,0x80
  ,0x00,0xff,0x83,0xe0,0xff,0xff,0xff,0x80
  ,0x01,0xfc,0x07,0xc1,0xff,0xff,0xe3,0xc0
  ,0x01,0xe0,0x1f,0x01,0xff,0xff,0xc3,0xc0
  ,0x00,0x00,0xfe,0x01,0xff,0xff,0x87,0xe0
  ,0x00,0x03,0xf8,0x13,0xff,0xff,0x0f,0xe0
  ,0x00,0x1f,0xe0,0x73,0xff,0xfe,0x1f,0xe0
  ,0x00,0x7f,0x81,0xf3,0xff,0xfc,0x1f,0xe0
  ,0x00,0xfc,0x03,0xe3,0xef,0xf8,0x3f,0xe0
  ,0x00,0x60,0x0f,0xc3,0xc7,0xf0,0x7f,0xe0
  ,0x00,0x00,0x3f,0x03,0xc3,0xe0,0xff,0xe0
  ,0x00,0x00,0xfc,0x03,0xc1,0xc1,0xff,0xe0
  ,0x00,0x07,0xf0,0x13,0xe0,0x83,0xff,0xe0
  ,0x00,0x0f,0xc0,0x7b,0xf8,0x07,0xff,0xe0
  ,0x00,0x0f,0x01,0xf9,0xfc,0x0f,0xff,0xc0
  ,0x00,0x00,0x07,0xf1,0xfe,0x1f,0xff,0xc0
  ,0x00,0x00,0x1f,0xc0,0xff,0x3f,0xff,0x80
  ,0x00,0x00,0x7e,0x00,0xff,0xff,0xff,0x80
  ,0x00,0x00,0xfc,0x00,0x7f,0xff,0xff,0x00
  ,0x00,0x00,0xf0,0x1f,0x3f,0xff,0xfe,0x00
  ,0x00,0x00,0x00,0x7f,0x1f,0xff,0xfc,0x00
  ,0x00,0x00,0x01,0xff,0x8f,0xff,0xf8,0x00
  ,0x00,0x00,0x03,0xe0,0xe3,0xff,0xe0,0x00
  ,0x00,0x00,0x01,0x80,0x00,0x7f,0x00,0x00
  };
//---------------------------------------------------------------
#define FinPr_invalid_width 128
#define FinPr_invalid_height 64
const uint8_t PROGMEM FinPr_invalid_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x80, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x30, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x1e, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x73, 0x84, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x80, 0xc4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x0c, 0x22, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x3f, 0x22, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x41, 0x13, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x26, 0x40, 0x91, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x26, 0xc8, 0x91, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x4c, 0x91, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x44, 0x99, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x44, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x32, 0x44, 0x48, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x66, 0x60, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x20, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x22, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x11, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x8f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x8c, 0x1f, 0xef, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 0x84, 0x1f, 0xc7, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x3f, 0x83, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x3f, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x60, 0x3f, 0xc0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x3f, 0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3f, 0xf0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0c, 0x3f, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3a, 0x3f, 0xc0, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x82, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x87, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0e, 0x1f, 0xcf, 0x9f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x31, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x8f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x80, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
//---------------------------------------------------------------
#define FinPr_failed_width 128
#define FinPr_failed_height 64
const uint8_t PROGMEM FinPr_failed_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x80, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x30, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x1e, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x73, 0x84, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x80, 0xc4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x0c, 0x22, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x3f, 0x22, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x41, 0x13, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x26, 0x40, 0x91, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x26, 0xc8, 0x91, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x4c, 0x91, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x44, 0x99, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x44, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x32, 0x44, 0x48, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x66, 0x60, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x20, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x22, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x11, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x8f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x8c, 0x1f, 0xef, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 0x84, 0x1f, 0xc7, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x3f, 0x83, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x3f, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x60, 0x3f, 0xc0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x3f, 0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3f, 0xf0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0c, 0x3f, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3a, 0x3f, 0xc0, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x82, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x87, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0e, 0x1f, 0xcf, 0x9f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x31, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x8f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x80, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
//---------------------------------------------------------------
#define FinPr_scan_width 64
#define FinPr_scan_height 64
const uint8_t PROGMEM FinPr_scan_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1f,0xf8,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x7f,0xff,0x00,0x00,0x00
  ,0x00,0x00,0x01,0xfc,0x7f,0xc0,0x00,0x00
  ,0x00,0x00,0x03,0xc0,0x03,0xe0,0x00,0x00
  ,0x00,0x00,0x07,0x80,0x00,0xf0,0x00,0x00
  ,0x00,0x00,0x0e,0x00,0x00,0x3c,0x00,0x00
  ,0x00,0x00,0x1c,0x1f,0xfc,0x1c,0x00,0x00
  ,0x00,0x00,0x38,0x7f,0xfe,0x0e,0x00,0x00
  ,0x00,0x00,0x78,0xf8,0x0f,0x87,0x00,0x00
  ,0x00,0x00,0x71,0xe0,0x03,0xc7,0x00,0x00
  ,0x00,0x00,0xe3,0x80,0x01,0xc3,0x80,0x00
  ,0x00,0x00,0xc3,0x83,0xc0,0xe3,0x80,0x00
  ,0x00,0x00,0xc7,0x0f,0xf0,0x71,0x80,0x00
  ,0x00,0x00,0x06,0x1f,0xf8,0x71,0xc0,0x00
  ,0x00,0x00,0x0e,0x1c,0x3c,0x31,0xc0,0x00
  ,0x00,0x00,0x1c,0x38,0x1c,0x31,0xc0,0x00
  ,0x00,0x00,0x38,0x70,0x0e,0x39,0xc0,0x00
  ,0x00,0x01,0xf0,0x71,0x8e,0x39,0xc0,0x00
  ,0x00,0x03,0xe0,0xe1,0x86,0x31,0xc0,0x00
  ,0x00,0x03,0x81,0xe3,0x8e,0x31,0x80,0x00
  ,0x00,0x00,0x03,0xc3,0x8e,0x33,0x80,0x00
  ,0x00,0x00,0x07,0x87,0x0c,0x73,0x80,0x00
  ,0x00,0x00,0x1f,0x0e,0x1c,0x73,0x80,0x00
  ,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe
  ,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  ,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  ,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x03,0xf0,0x1e,0x3e,0x1c,0x00,0x00
  ,0x00,0x03,0x80,0x7c,0x77,0x0f,0x00,0x00
  ,0x00,0x00,0x01,0xf0,0xe3,0x07,0xc0,0x00
  ,0x00,0x00,0x07,0xe3,0xc3,0x81,0xf0,0x00
  ,0x00,0x00,0x3f,0x87,0x81,0xc0,0x60,0x00
  ,0x00,0x01,0xfc,0x1f,0x00,0xf0,0x00,0x00
  ,0x00,0x01,0xe0,0x3c,0x00,0x7c,0x00,0x00
  ,0x00,0x00,0x00,0xf8,0x78,0x1f,0x00,0x00
  ,0x00,0x00,0x07,0xe0,0xfc,0x0f,0xc0,0x00
  ,0x00,0x00,0x3f,0x83,0xef,0x03,0xc0,0x00
  ,0x00,0x00,0xfc,0x0f,0x87,0x80,0x00,0x00
  ,0x00,0x00,0x70,0x1f,0x03,0xe0,0x00,0x00
  ,0x00,0x00,0x00,0x7c,0x00,0xf8,0x00,0x00
  ,0x00,0x00,0x01,0xf0,0x00,0x3e,0x00,0x00
  ,0x00,0x00,0x0f,0xc0,0xf8,0x0f,0x00,0x00
  ,0x00,0x00,0x1f,0x03,0xfe,0x02,0x00,0x00
  ,0x00,0x00,0x0c,0x0f,0x8f,0x80,0x00,0x00
  ,0x00,0x00,0x00,0x3f,0x03,0xe0,0x00,0x00
  ,0x00,0x00,0x00,0xf8,0x00,0xf0,0x00,0x00
  ,0x00,0x00,0x01,0xe0,0x00,0x30,0x00,0x00
  ,0x00,0x00,0x01,0xc0,0xf8,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x07,0xfe,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0f,0x8e,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  };
//************************************************************************
 
void setup() {
  Serial.begin(115200);
  delay(1000);
  pinMode(touchPin, INPUT);
  //-----------initiate OLED display-------------
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
   
  display.display();
  delay(2000);  
  display.clearDisplay();
  //---------------------------------------------
  connectToWiFi();

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
  //---------------------------------------------
  finger.begin(57600);
  Serial.println("\n\nAdafruit finger detect test");

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
     
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }
  
  Serial.println(F("Reading sensor parameters"));
  finger.getParameters();
  Serial.print(F("Status: 0x")); Serial.println(finger.status_reg, HEX);
  Serial.print(F("Sys ID: 0x")); Serial.println(finger.system_id, HEX);
  Serial.print(F("Capacity: ")); Serial.println(finger.capacity);
  Serial.print(F("Security level: ")); Serial.println(finger.security_level);
  Serial.print(F("Device address: ")); Serial.println(finger.device_addr, HEX);
  Serial.print(F("Packet len: ")); Serial.println(finger.packet_len);
  Serial.print(F("Baud rate: ")); Serial.println(finger.baud_rate);

    Serial.print("\nDefault ESP32 MAC Address: ");
    Serial.println(WiFi.macAddress());
      macAddress = WiFi.macAddress();
  //---------------------------------------------
  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  Serial.println("Waiting for valid finger...");
  //Timers---------------------------------------
  
   CheckMode();
   
  t3 = timer.setInterval(5000L, printLocalTime); 
  //t1 = timer.setInterval(intervalDuration, CheckMode);
 
}

void loop() {
  timer.run();      //Keep the timer in the loop function in order to update the time as soon as possible
  //check if there's a connection to Wi-Fi or not
  if(!WiFi.isConnected()){
    if (millis() - previousMillis >= 10000) {
      previousMillis = millis();
      connectToWiFi();    //Retry to connect to Wi-Fi
    }
  }
  // if (digitalRead(touchPin) == HIGH) {
    CheckFingerprint();
    delay(1000);  // Adjust the delay as needed to prevent multiple detections
  //} //Check the sensor if the there a finger.
  delay(10); // put your main code here, to run repeatedly:
   
}

void CheckFingerprint(){
 
  FingerID = getFingerprintID();
  DisplayFingerprintID();
 
}

void DisplayFingerprintID(){
  //Fingerprint has been detected 
  if (FingerID > 0){

    SendFingerprintID( FingerID ); // Send the Fingerprint ID to the website.
    delay(2000);
  }
  //---------------------------------------------
  //No finger detected
  else if (FingerID == 0){

  }
  //---------------------------------------------
  //Didn't find a match
  else if (FingerID == -1){
    display.clearDisplay();
    display.drawBitmap( 0, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
    display.display();
   // delay(2000);

  }
  //---------------------------------------------
  //Didn't find the scanner or there an error
  else if (FingerID == -2){
    display.clearDisplay();
    display.drawBitmap( 0, 0, FinPr_failed_bits, FinPr_failed_width, FinPr_failed_height, WHITE);
    display.display();
    //delay(2000);
   
  }
}

void CheckMode(){
  Serial.println("Check Mode");
  //long intervalDuration;
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "/api/Fingerprint/UpdateStatus?mac_address=" + macAddress; // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request,
  //    Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload


    Serial.print(payload);
    Serial.print("ok");
      String dev_mode = payload.substring(0,1);
      int devMode = dev_mode.toInt();

      if(devMode != 0){
         user_id =  payload.substring(2,5);
         id = user_id.toInt();
      }

  //      Serial.println(dev_mode);
      if(devMode == 0){
        Serial.println("Deivce Mode: Attandance");
        interval = payload.substring(2);
        if(intervalDuration != interval.toInt()){
        intervalDuration = interval.toInt();
        Serial.println(intervalDuration);
        timer.disable(t1);  // Disable the current interval
        t1 = timer.setInterval(intervalDuration, CheckMode);
       // timer.enable(t1); 
        delay(1000);
       //ESP.restart();
        }
      }
      else if(devMode == 1){
        Serial.println("Deivce Mode: Enrollment");
        Serial.println(id);
        interval = payload.substring(6);
       
        http.end(); 
        getFingerprintEnroll();
        delay(500);
        CheckMode();

        if(intervalDuration != interval.toInt()){
        intervalDuration = interval.toInt();
        Serial.println(intervalDuration);
        timer.disable(t1);  // Disable the current interval
        t1 = timer.setInterval(intervalDuration, CheckMode); 
        delay(1000);
       
        }
         
      }

       else if(devMode == 2){
        Serial.println("Deivce Mode: Delete");
        Serial.println(id);
        interval = payload.substring(6);
        http.end();  //Close connection
        deleteFingerprint(id);
        delay(1000);
        if(intervalDuration != interval.toInt()){
        intervalDuration = interval.toInt();
        Serial.println(intervalDuration);
        timer.disable(t1);  // Disable the current interval
        t1 = timer.setInterval(intervalDuration, CheckMode); 
        delay(1000);
        
        }  
      }
    
    http.end();  //Close connection
  }

 // t1 = timer.setInterval(intervalDuration, CheckMode);
//  Serial.print("Number of Timers: ");
//  Serial.println(timer.getNumTimers());
}

void SendFingerprintID( int finger ){
  Serial.println("Sending the Fingerprint ID");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "/api/Fingerprint/Attendance?user_id=" + String(finger) + "&mac_address=" + macAddress; // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request   //Specify content-type header
    
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
    
    Serial.println(httpCode);   //Print HTTP return code
    Serial.println(payload);    //Print request response payload
    Serial.println(finger);     //Print fingerprint ID
  
    if (payload.substring(0, 6) == "Login1") {
      String user_name = payload.substring(6);
  //  Serial.println(user_name);
      playSound(detectedMelody, detectedNoteDurations);
      playSound(notDetectedMelody, notDetectedNoteDurations);
      display.clearDisplay();
      display.setTextSize(2);             // Normal 2:2 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(15,1);             // Start at top-left corner
      display.print(F("Welcome"));
      display.setCursor(2,20);
      display.print(user_name);
      display.display();
    }
    else if (payload.substring(0, 6) == "Logout") {
      String user_name = payload.substring(6);
  //  Serial.println(user_name);
       playSound(detectedMelody, detectedNoteDurations);
       playSound(notDetectedMelody, notDetectedNoteDurations);
      display.clearDisplay();
      display.setTextSize(2);             // Normal 2:2 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(10,2);             // Start at top-left corner
      display.print(F("Good Bye"));
      display.setCursor(3,22);
      display.print(user_name);
      display.display();
    }

    else if (payload.substring(0, 6) == "Login2") {
      
       playSound(detectedMelody, detectedNoteDurations);
       playSound(notDetectedMelody, notDetectedNoteDurations);
      display.clearDisplay();
      display.setTextSize(2);             // Normal 2:2 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(10,1);             // Start at top-left corner
      display.print(F("already   login"));
      //display.setCursor(0,20);
      //display.print(user_name);
      display.display();
    }
    delay(10);
    http.end();  //Close connection
  }
   
}

int  getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return 0;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -2;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return -2;
    default:
      Serial.println("Unknown error");
      return -2;
  }
  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return -2;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return -2;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return -2;
    default:
      Serial.println("Unknown error");
      return -2;
  }
  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
   //  playSound(detectedMelody, detectedNoteDurations);
     delay(10);
    //Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    //playSound(notDetectedMelody, notDetectedNoteDurations);
    return -2;
  } else if (p == FINGERPRINT_NOTFOUND) {
   // playSound(notDetectedMelody, notDetectedNoteDurations);
    //Serial.println("Did not find a match");
    return -1;
  } else {
   // playSound(notDetectedMelody, notDetectedNoteDurations);
    //Serial.println("Unknown error");
    return -2;
  }   
  // found a match!
  //playSound(notDetectedMelody, notDetectedNoteDurations);
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 

  return finger.fingerID;
}

uint8_t getFingerprintEnroll() {
  int p = -1;
  display.clearDisplay();
  // display.setTextSize(2);             // Normal 2:2 pixel scale
  // display.setTextColor(WHITE);        // Draw white text
  // display.setCursor(2,10);             // Start at top-left corner
  // display.print(F("scanning...."));
  // display.display();

  isEnrollmentActive = true;
  while (p != FINGERPRINT_OK) {
      
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      
      display.clearDisplay();
      //display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      
      display.setTextSize(2);             // Normal 2:2 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(2,8);             // Start at top-left corner
      display.print(F("scanning  finger...."));
      display.display();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_IMAGEFAIL:
      
      Serial.println("Imaging error");
      break;
    default:
      
      Serial.println("Unknown error");
      break;
    }
  }
  
  // OK success!
  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
     // playSound(detectedMelody, detectedNoteDurations);
     // display.clearDisplay();
    //  display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
     // display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  display.clearDisplay();
  display.setTextSize(2);             // Normal 2:2 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(2,2);             // Start at top-left corner
  display.print(F("Remove"));
  display.setCursor(2,20);
  display.print(F("finger"));
  display.display();
  //Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  display.clearDisplay();
  //display.drawBitmap( 34, 0, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, WHITE);
 // display.display();
  while (p != FINGERPRINT_OK) {
    
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
     // playSound(detectedMelody, detectedNoteDurations);
     // display.clearDisplay();
     // display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
     // display.display();
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      display.setTextSize(2);             // Normal 2:2 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(2,8);             // Start at top-left corner
      display.print(F("scanning  finger...."));
      display.display();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
    // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Imaging error");
      break;
    default:
     // playSound(notDetectedMelody, notDetectedNoteDurations);
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      display.clearDisplay();
     // display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
    display.clearDisplay();
    //display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
      Serial.println("Fingerprints did not match");
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
    return p;
  } else {
      Serial.println("Unknown error");
    return p;
  }   
  
  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    display.clearDisplay();
   // display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
    confirmAdding(id);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  } 

isEnrollmentActive = false;  
}

void confirmAdding(int id){
  Serial.println("confirm Adding");
  if(WiFi.status() == WL_CONNECTED){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "/api/Fingerprint/ConfirmAdd?user_id=" + String(id) + "&mac_address=" + macAddress; // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    
    http.begin(Link); //initiate HTTP request,
  //   Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
    if(httpCode == 200){
      display.clearDisplay();
      display.setTextSize(2);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(10,10);             // Start at top-left corner
      display.print(payload);
      display.display();
      Serial.println(payload);
      delay(2000);
    }
    else{
      Serial.println("Error Confirm!!");      
    }
    http.end();  //Close connection
  }
}

uint8_t deleteFingerprint( int id) {
  uint8_t p = -1;
  
  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    //Serial.println("Deleted!");
    display.clearDisplay();
    display.setTextSize(2);             // Normal 2:2 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(2,2);             // Start at top-left corner
    display.print(F("Deleted!\n"));
    display.display();
    ConformDelete(id);
    //delay(1000);
    //return;
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    // Serial.println("Communication error");
    // display.clearDisplay();
    // display.setTextSize(1);             // Normal 1:1 pixel scale
    // display.setTextColor(WHITE);        // Draw white text
    // display.setCursor(2,2);             // Start at top-left corner
    // display.print(F("Communication error!\n"));
    // display.display();
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
    // display.clearDisplay();
    // display.setTextSize(1);             // Normal 1:1 pixel scale
    // display.setTextColor(WHITE);        // Draw white text
    // display.setCursor(2,2);             // Start at top-left corner
    // display.print(F("Could not delete in that location!\n"));
    // display.display();
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    // display.clearDisplay();
    // display.setTextSize(1);             // Normal 1:1 pixel scale
    // display.setTextColor(WHITE);        // Draw white text
    // display.setCursor(2,2);             // Start at top-left corner
    // display.print(F("Error writing to flash!\n"));
    // display.display();
    return p;
  } else {
    //Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    // display.clearDisplay();
    // display.setTextSize(2);             // Normal 2:2 pixel scale
    // display.setTextColor(WHITE);        // Draw white text
    // display.setCursor(2,2);             // Start at top-left corner
    // display.print(F("Unknown error:\n"));
    // display.display();
    return p;
  } 
  printLocalTime();  
}

void ConformDelete(int finger){
 Serial.println("Sending the Fingerprint ID");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "/api/Fingerprint/ConfirmDelete?user_id=" + String(finger) + "&mac_address=" + macAddress; // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request   //Specify content-type header
    
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
    
    Serial.println(httpCode);   //Print HTTP return code
    Serial.println(payload);    //Print request response payload
    delay(1000);
    http.end();     //Print fingerprint ID 
 }
}

void connectToWiFi(){
   Serial.println("Disconnecting current wifi connection");
    WiFi.disconnect();
    EEPROM.begin(512); //Initialasing EEPROM
    delay(10);
    //pinMode(15, INPUT);
    Serial.println();
    Serial.println();
    Serial.println("Startup");
    //EEPROM.write(i, 0);
    

    //Read eeprom for ssid and pass
    Serial.println("Reading EEPROM ssid");
    
    for (int i = 0; i < 32; ++i)
    {
      esid += char(EEPROM.read(i));
    }

    Serial.println();
    Serial.print("SSID: ");
    Serial.println(esid);
    Serial.println("Reading EEPROM pass");

    for (int i = 32; i < 96; ++i)
    {
      epass += char(EEPROM.read(i));
    }

    Serial.print("PASS: ");
    Serial.println(epass);
    WiFi.begin(esid.c_str(), epass.c_str());

    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(2, 2);             // Start at top-left corner
    display.print(F("Try to connect WIFI"));
    display.setCursor(2, 20);   
    display.setTextSize(2);          
    display.print(esid);
   // display.setCursor(2, 40);   
    //display.setTextSize(1);          
   // display.print("192.168.1.1");
    
    display.display();
    
    uint32_t periodToConnect = 30000L;
    for(uint32_t StartToConnect = millis(); (millis()-StartToConnect) < periodToConnect;){
      if ( WiFi.status() != WL_CONNECTED ){
        delay(500);
        Serial.print(".");
      } else{
        break;
      }
    }
    
    if(WiFi.isConnected()){
      Serial.println("");
      //Serial.println("Connected");

      for (int i = 0; i < 10; i++)
    {
      Serial.print("Connected to ");
      Serial.print(esid);
      Serial.println(" Successfully");
      delay(100);
    }
      
      display.clearDisplay();
      display.setTextSize(2);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(8, 0);             // Start at top-left corner
      display.print(F("Connected \n"));
      display.drawBitmap( 30,20, Wifi_connected_bits, Wifi_connected_width, Wifi_connected_height, WHITE);
      display.display();
      
      Serial.print("IP address: ");
      Serial.println(WiFi.localIP());  //IP address assigned to your ESP
    }
    else{
      Serial.println("");
      Serial.println("Not Connected");
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(2, 2);             // Start at top-left corner
      display.print(F("Connected to wifi "));
      display.setCursor(2, 20);   
      display.setTextSize(1);          
      display.print("C3_AC_EBE4 & search");
      display.setCursor(2, 40);   
      display.setTextSize(1);          
      display.print("192.168.1.3");
    
    display.display();
      WiFi.mode(WIFI_OFF);
      delay(1000);
    }
     if (Wificonnect())
  {
    Serial.println(" connection status positive");
    return;
  }
  else
  {
    Serial.println("Connection Status Negative");
    Serial.println("Turning the HotSpot On");
    Weblaunch();
    setupAP();// Setup HotSpot
  }
  Serial.println();
  Serial.println("Waiting.");
  while ((WiFi.status() != WL_CONNECTED))
  {
    Serial.print(".");
    delay(100);

    
    int connectedDevices = WiFi.softAPgetStationNum();
  
  if (connectedDevices > 0) {
    //Serial.println(connectedDevices);
  } else {
    Serial.println("No devices connected to ESP32 hotspot");
  }

  delay(5000);

    server.handleClient();
  }
    delay(1000);
}
//=======================================================================
void printLocalTime()
{

  if (!isEnrollmentActive) {
   struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  char formattedDate[20];
  strftime(formattedDate, sizeof(formattedDate), "%d/%m/%Y", &timeinfo);
  
  char formattedTime[20];
  strftime(formattedTime, sizeof(formattedTime), "%H:%M%:%S", &timeinfo);
  
  display.clearDisplay();
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(20, 10);
  display.print(formattedTime);

   display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(2, 40);
  display.print(formattedDate);

  display.display();
 }
  //Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

void playSound(int melody[], int noteDurations[]) {
  int size = sizeof(noteDurations) / sizeof(int);

  for (int thisNote = 0; thisNote < size; thisNote++) {
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(BUZZER_PIN, melody[thisNote], noteDuration);
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    noTone(BUZZER_PIN);
  }
}

bool Wificonnect(void)
{
  int c = 0;
  //Serial.println("Waiting for Wifi to connect");
  while ( c < 20 ) {
    if (WiFi.status() == WL_CONNECTED)
    {
      return true;
    }
    delay(500);
    Serial.print("*");
    c++;
  }
  Serial.println("");
  Serial.println("Connect timed out, opening AP");
  return false;
}

void Weblaunch()
{
  Serial.println("");
  if (WiFi.status() == WL_CONNECTED)
    Serial.println("WiFi connected");
  Serial.print("Local IP: ");
  Serial.println(WiFi.localIP());
  Serial.print("SoftAP IP: ");
  Serial.println(WiFi.softAPIP());
  createWebServer();
  server.begin(); // Start the server
  Serial.println("Server started");

}
void setupAP(void)
{
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);

  // Set your constant IP address here
  IPAddress apIP(192, 168, 1, 3);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));

  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n == 0)
    Serial.println("no networks found");
  else
  {
    Serial.print(n);
    Serial.println(" networks found");
    for (int i = 0; i < n; ++i)
    {
      // Print SSID and RSSI for each network found
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" (");
      Serial.print(WiFi.RSSI(i));
      Serial.print(")");
      //Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*");
      delay(10);
    }
  }

  Serial.println("");
  st = "<ol>";
  for (int i = 0; i < n; ++i)
  {
    // Print SSID and RSSI for each network found
    st += "<li>";
    st += WiFi.SSID(i);
    st += " (";
    st += WiFi.RSSI(i);
    st += ")";
    //st += (WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*";
    st += "</li>";
  }
  st += "</ol>";
  delay(100);

  // Set your hotspot SSID and password here
  WiFi.softAP("C3_AC_EBE4", "C48744553");
  Serial.println("Initializing_softap_for_wifi_credentials_modification");
  Weblaunch();
  
  if (MDNS.begin("C3_AC_EBE4"))
  { //myaqm.local/
    Serial.println("MDNS responder started");
  }

  Serial.println("over");
}


void createWebServer()
{
  server.on("/", HTTP_GET, []() {
    IPAddress ip = WiFi.softAPIP();
    String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
    content = "<!DOCTYPE HTML>\r\n<html>";
    content += "<head><style>body {font-family: Arial, sans-serif;}</style></head>";
    content += "<body style='text-align:center;margin-top:50px;'>";
    content += "<h2>Welcome to WiFi Credentials Update page</h2>";
    content += "<form action=\"/setting\" method=\"POST\" style='display:inline-block;text-align:left;'>";
    content += "<label for='ssid'>SSID:</label><br>";
    content += "<input type='text' name='ssid' required style='width: 200px;margin-bottom:10px;'><br>";
    content += "<label for='pass'>Password:</label><br>";
    content += "<input type='password' name='pass' required style='width: 200px;margin-bottom:10px;'><br>";
    content += "<input type='submit' value='Save Credentials' style='padding: 10px;'>";
    content += "</form>";
    content += "<p>IP Address: " + ipStr + "</p>";
    content += "</body></html>";
    server.send(200, "text/html", content);
  });

  server.on("/setting", HTTP_POST, []() {
    String qsid = server.arg("ssid");
    String qpass = server.arg("pass");

    if (qsid.length() > 0 && qpass.length() > 0) {
      Serial.println("Clearing EEPROM");
      for (int i = 0; i < 96; ++i) {
        EEPROM.write(i, 0);
      }

      Serial.println(qsid);
      Serial.println(qpass);

      Serial.println("Writing EEPROM SSID:");
      for (int i = 0; i < qsid.length(); ++i) {
        EEPROM.write(i, qsid[i]);
        Serial.print("Wrote: ");
        Serial.println(qsid[i]);
      }

      Serial.println("Writing EEPROM Password:");
      for (int i = 0; i < qpass.length(); ++i) {
        EEPROM.write(32 + i, qpass[i]);
        Serial.print("Wrote: ");
        Serial.println(qpass[i]);
      }

      EEPROM.commit();
       content = "{\"Success\":\"THANK YOU\"}";
        statusCode = 200;
        server.send(200, "text/plain", "WiFi configured successfully. Rebooting...");
        delay(2000);
        ESP.restart();
      } else {
        content = "{\"Error\":\"404 not found\"}";
        statusCode = 404;
        Serial.println("Sending 404");
      }

    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(statusCode, "text/html", content);
  });
}
